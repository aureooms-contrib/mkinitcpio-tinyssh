#!/bin/bash

KEY_DIR=/etc/tinyssh/sshkeydir

error_no_keys() {
  echo "ERROR: There are no keys in ${KEY_DIR}! Something must have gone wrong. Please debug $(realpath $0) to fix it."
}

verify_keys() {
  if [ ! -d "$KEY_DIR" -o -n "$(find "$KEY_DIR" -maxdepth 0 -empty)" ]; then
      return 1
  fi
  return 0
}

display_fingerprints() {
  if [ -d "$KEY_DIR" ]; then
      tinysshd-printkey "$KEY_DIR"
  fi
}

generate_keys() {
  if [ ! -d "$KEY_DIR" ]; then
      tinysshd-makekey "$KEY_DIR"
      if [ $? -eq 0 ]; then
          echo "Generated tinyssh keys..."
          return 0
      fi
  fi
  return 1
}

copy_openssh_keys() {
  local osshed25519="/etc/ssh/ssh_host_ed25519_key"

  local return_code=1

  if [ -s "$osshed25519" -a ! -d "$KEY_DIR" -a -x /usr/bin/tinyssh-convert ]; then
      tinyssh-convert "$KEY_DIR" < "$osshed25519"
      if [ $? -eq 0 ]; then
          return_code=0
      fi
  fi

  if [ $return_code -eq 0 ]; then
      echo "Converted keys from OpenSSH..."
  fi

  return $return_code
}

create_systemd_customdep () {
    add_dir "/etc/systemd/system/tinyssh@22.socket.d"
    cat << CUSTOMEOF > "${BUILDROOT}/etc/systemd/system/tinyssh@22.socket.d/cryptsetup-dep.conf"
[Unit]
Before=
Before=cryptsetup.target
CUSTOMEOF
}

build ()
{
  #
  # Begin real processing
  #

  # Are we even needed?
  if [ ! -r "/etc/tinyssh/root_key" -o ! -s "/etc/tinyssh/root_key" ]; then
    echo "There is no root key in /etc/tinyssh/root_key existent; exit"
    return 0
  fi

  # if TMPDIR is set leave it alone otherwise set
  [ -z $TMPDIR ] && TMPDIR='/tmp/mkinitcpio-tinyssh'

  # check if TMPDIR exsists if not make it
  [ -d $TMPDIR ] || mkdir -p $TMPDIR

  umask 0022

  copy_openssh_keys || generate_keys

  if ! verify_keys ; then
    error_no_keys
    return 1
  fi

  display_fingerprints

  #systemd enabled
  declare -F add_systemd_unit > /dev/null 2>&1
  if [ $? -eq 0 ]; then
      add_systemd_unit "tinysshgenkeys.service"
      add_systemd_unit "tinyssh@.socket"
      add_systemd_unit "tinyssh@.service"
      systemctl --root "$BUILDROOT" enable tinyssh@22.socket
      create_systemd_customdep
  #base enabled
  else
      add_checked_modules "/drivers/net/"
      add_binary "rm"
      add_binary "killall"
      add_binary "tinysshd"
      add_file "/lib/libnss_files.so.2"
      add_runscript
  fi

  #both
  add_dir "/root/.ssh"
  cat /etc/tinyssh/root_key > "${BUILDROOT}"/root/.ssh/authorized_keys

  #necessary for tinyssh private keys
  shopt -s dotglob
  add_full_dir "/etc/tinyssh"
  shopt -u dotglob

}

help ()
{
    cat<<HELPEOF
This hook is meant to be used in conjunction with mkinitcpio-netconf and/or
mkinitcpio-ppp. It DOES NOT provide any default shell. It will only install
and start tinyssh on early userspace. In the package mkinitcpio-utils you
will find hooks and shells for remote unlocking a luks root partition,
among others.
HELPEOF
}
